// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ismail118/simple-bank/repository (interfaces: Store,Repository)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/ismail118/simple-bank/models"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountBalanceByID mocks base method.
func (m *MockStore) AddAccountBalanceByID(arg0 context.Context, arg1, arg2 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalanceByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalanceByID indicates an expected call of AddAccountBalanceByID.
func (mr *MockStoreMockRecorder) AddAccountBalanceByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalanceByID", reflect.TypeOf((*MockStore)(nil).AddAccountBalanceByID), arg0, arg1, arg2)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 models.Users, arg2 func(models.Users) error) (CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1, arg2)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteUsers mocks base method.
func (m *MockStore) DeleteUsers(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockStoreMockRecorder) DeleteUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockStore)(nil).DeleteUsers), arg0, arg1)
}

// GetAccountByID mocks base method.
func (m *MockStore) GetAccountByID(arg0 context.Context, arg1 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockStoreMockRecorder) GetAccountByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockStore)(nil).GetAccountByID), arg0, arg1)
}

// GetAccountByIdForUpdate mocks base method.
func (m *MockStore) GetAccountByIdForUpdate(arg0 context.Context, arg1 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIdForUpdate indicates an expected call of GetAccountByIdForUpdate.
func (mr *MockStoreMockRecorder) GetAccountByIdForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIdForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountByIdForUpdate), arg0, arg1)
}

// GetAccountByOwnerAndCurrency mocks base method.
func (m *MockStore) GetAccountByOwnerAndCurrency(arg0 context.Context, arg1, arg2 string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByOwnerAndCurrency", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByOwnerAndCurrency indicates an expected call of GetAccountByOwnerAndCurrency.
func (mr *MockStoreMockRecorder) GetAccountByOwnerAndCurrency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByOwnerAndCurrency", reflect.TypeOf((*MockStore)(nil).GetAccountByOwnerAndCurrency), arg0, arg1, arg2)
}

// GetEntryByID mocks base method.
func (m *MockStore) GetEntryByID(arg0 context.Context, arg1 int64) (models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryByID", arg0, arg1)
	ret0, _ := ret[0].(models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryByID indicates an expected call of GetEntryByID.
func (mr *MockStoreMockRecorder) GetEntryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryByID", reflect.TypeOf((*MockStore)(nil).GetEntryByID), arg0, arg1)
}

// GetListAccounts mocks base method.
func (m *MockStore) GetListAccounts(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAccounts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAccounts indicates an expected call of GetListAccounts.
func (mr *MockStoreMockRecorder) GetListAccounts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAccounts", reflect.TypeOf((*MockStore)(nil).GetListAccounts), arg0, arg1, arg2, arg3)
}

// GetListEntries mocks base method.
func (m *MockStore) GetListEntries(arg0 context.Context, arg1 int64, arg2, arg3 int) ([]*models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListEntries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListEntries indicates an expected call of GetListEntries.
func (mr *MockStoreMockRecorder) GetListEntries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListEntries", reflect.TypeOf((*MockStore)(nil).GetListEntries), arg0, arg1, arg2, arg3)
}

// GetListTransfers mocks base method.
func (m *MockStore) GetListTransfers(arg0 context.Context, arg1, arg2 int64, arg3, arg4 int) ([]*models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransfers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransfers indicates an expected call of GetListTransfers.
func (mr *MockStoreMockRecorder) GetListTransfers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransfers", reflect.TypeOf((*MockStore)(nil).GetListTransfers), arg0, arg1, arg2, arg3, arg4)
}

// GetListUsers mocks base method.
func (m *MockStore) GetListUsers(arg0 context.Context, arg1, arg2 int) ([]*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUsers indicates an expected call of GetListUsers.
func (mr *MockStoreMockRecorder) GetListUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUsers", reflect.TypeOf((*MockStore)(nil).GetListUsers), arg0, arg1, arg2)
}

// GetSessionsByID mocks base method.
func (m *MockStore) GetSessionsByID(arg0 context.Context, arg1 uuid.UUID) (models.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsByID", arg0, arg1)
	ret0, _ := ret[0].(models.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsByID indicates an expected call of GetSessionsByID.
func (mr *MockStoreMockRecorder) GetSessionsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsByID", reflect.TypeOf((*MockStore)(nil).GetSessionsByID), arg0, arg1)
}

// GetTransferByID mocks base method.
func (m *MockStore) GetTransferByID(arg0 context.Context, arg1 int64) (models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByID", arg0, arg1)
	ret0, _ := ret[0].(models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByID indicates an expected call of GetTransferByID.
func (mr *MockStoreMockRecorder) GetTransferByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByID", reflect.TypeOf((*MockStore)(nil).GetTransferByID), arg0, arg1)
}

// GetUsersByEmail mocks base method.
func (m *MockStore) GetUsersByEmail(arg0 context.Context, arg1 string) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByEmail", arg0, arg1)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByEmail indicates an expected call of GetUsersByEmail.
func (mr *MockStoreMockRecorder) GetUsersByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByEmail", reflect.TypeOf((*MockStore)(nil).GetUsersByEmail), arg0, arg1)
}

// GetUsersByUsername mocks base method.
func (m *MockStore) GetUsersByUsername(arg0 context.Context, arg1 string) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByUsername", arg0, arg1)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByUsername indicates an expected call of GetUsersByUsername.
func (mr *MockStoreMockRecorder) GetUsersByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByUsername", reflect.TypeOf((*MockStore)(nil).GetUsersByUsername), arg0, arg1)
}

// GetVerifyEmailByID mocks base method.
func (m *MockStore) GetVerifyEmailByID(arg0 context.Context, arg1 int64) (models.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyEmailByID", arg0, arg1)
	ret0, _ := ret[0].(models.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyEmailByID indicates an expected call of GetVerifyEmailByID.
func (mr *MockStoreMockRecorder) GetVerifyEmailByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyEmailByID", reflect.TypeOf((*MockStore)(nil).GetVerifyEmailByID), arg0, arg1)
}

// InsertAccount mocks base method.
func (m *MockStore) InsertAccount(arg0 context.Context, arg1 models.Account) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockStoreMockRecorder) InsertAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockStore)(nil).InsertAccount), arg0, arg1)
}

// InsertEntry mocks base method.
func (m *MockStore) InsertEntry(arg0 context.Context, arg1 models.Entry) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEntry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEntry indicates an expected call of InsertEntry.
func (mr *MockStoreMockRecorder) InsertEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEntry", reflect.TypeOf((*MockStore)(nil).InsertEntry), arg0, arg1)
}

// InsertSessions mocks base method.
func (m *MockStore) InsertSessions(arg0 context.Context, arg1 models.Sessions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSessions indicates an expected call of InsertSessions.
func (mr *MockStoreMockRecorder) InsertSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSessions", reflect.TypeOf((*MockStore)(nil).InsertSessions), arg0, arg1)
}

// InsertTransfer mocks base method.
func (m *MockStore) InsertTransfer(arg0 context.Context, arg1 models.Transfer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransfer", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransfer indicates an expected call of InsertTransfer.
func (mr *MockStoreMockRecorder) InsertTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransfer", reflect.TypeOf((*MockStore)(nil).InsertTransfer), arg0, arg1)
}

// InsertUsers mocks base method.
func (m *MockStore) InsertUsers(arg0 context.Context, arg1 models.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUsers indicates an expected call of InsertUsers.
func (mr *MockStoreMockRecorder) InsertUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsers", reflect.TypeOf((*MockStore)(nil).InsertUsers), arg0, arg1)
}

// InsertVerifyEmail mocks base method.
func (m *MockStore) InsertVerifyEmail(arg0 context.Context, arg1 models.VerifyEmail) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVerifyEmail indicates an expected call of InsertVerifyEmail.
func (mr *MockStoreMockRecorder) InsertVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVerifyEmail", reflect.TypeOf((*MockStore)(nil).InsertVerifyEmail), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 models.Transfer) (TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateUsers mocks base method.
func (m *MockStore) UpdateUsers(arg0 context.Context, arg1 UpdateUserParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockStoreMockRecorder) UpdateUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockStore)(nil).UpdateUsers), arg0, arg1)
}

// UpdateVerifyEmailIsUsed mocks base method.
func (m *MockStore) UpdateVerifyEmailIsUsed(arg0 context.Context, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmailIsUsed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVerifyEmailIsUsed indicates an expected call of UpdateVerifyEmailIsUsed.
func (mr *MockStoreMockRecorder) UpdateVerifyEmailIsUsed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmailIsUsed", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmailIsUsed), arg0, arg1, arg2)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 int64, arg2 string) (VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1, arg2)
}

// execTx mocks base method.
func (m *MockStore) execTx(arg0 context.Context, arg1 func(Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "execTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// execTx indicates an expected call of execTx.
func (mr *MockStoreMockRecorder) execTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "execTx", reflect.TypeOf((*MockStore)(nil).execTx), arg0, arg1)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddAccountBalanceByID mocks base method.
func (m *MockRepository) AddAccountBalanceByID(arg0 context.Context, arg1, arg2 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalanceByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalanceByID indicates an expected call of AddAccountBalanceByID.
func (mr *MockRepositoryMockRecorder) AddAccountBalanceByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalanceByID", reflect.TypeOf((*MockRepository)(nil).AddAccountBalanceByID), arg0, arg1, arg2)
}

// DeleteAccount mocks base method.
func (m *MockRepository) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockRepositoryMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockRepository)(nil).DeleteAccount), arg0, arg1)
}

// DeleteUsers mocks base method.
func (m *MockRepository) DeleteUsers(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockRepositoryMockRecorder) DeleteUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockRepository)(nil).DeleteUsers), arg0, arg1)
}

// GetAccountByID mocks base method.
func (m *MockRepository) GetAccountByID(arg0 context.Context, arg1 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockRepositoryMockRecorder) GetAccountByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockRepository)(nil).GetAccountByID), arg0, arg1)
}

// GetAccountByIdForUpdate mocks base method.
func (m *MockRepository) GetAccountByIdForUpdate(arg0 context.Context, arg1 int64) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIdForUpdate indicates an expected call of GetAccountByIdForUpdate.
func (mr *MockRepositoryMockRecorder) GetAccountByIdForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIdForUpdate", reflect.TypeOf((*MockRepository)(nil).GetAccountByIdForUpdate), arg0, arg1)
}

// GetAccountByOwnerAndCurrency mocks base method.
func (m *MockRepository) GetAccountByOwnerAndCurrency(arg0 context.Context, arg1, arg2 string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByOwnerAndCurrency", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByOwnerAndCurrency indicates an expected call of GetAccountByOwnerAndCurrency.
func (mr *MockRepositoryMockRecorder) GetAccountByOwnerAndCurrency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByOwnerAndCurrency", reflect.TypeOf((*MockRepository)(nil).GetAccountByOwnerAndCurrency), arg0, arg1, arg2)
}

// GetEntryByID mocks base method.
func (m *MockRepository) GetEntryByID(arg0 context.Context, arg1 int64) (models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryByID", arg0, arg1)
	ret0, _ := ret[0].(models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryByID indicates an expected call of GetEntryByID.
func (mr *MockRepositoryMockRecorder) GetEntryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryByID", reflect.TypeOf((*MockRepository)(nil).GetEntryByID), arg0, arg1)
}

// GetListAccounts mocks base method.
func (m *MockRepository) GetListAccounts(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAccounts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAccounts indicates an expected call of GetListAccounts.
func (mr *MockRepositoryMockRecorder) GetListAccounts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAccounts", reflect.TypeOf((*MockRepository)(nil).GetListAccounts), arg0, arg1, arg2, arg3)
}

// GetListEntries mocks base method.
func (m *MockRepository) GetListEntries(arg0 context.Context, arg1 int64, arg2, arg3 int) ([]*models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListEntries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListEntries indicates an expected call of GetListEntries.
func (mr *MockRepositoryMockRecorder) GetListEntries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListEntries", reflect.TypeOf((*MockRepository)(nil).GetListEntries), arg0, arg1, arg2, arg3)
}

// GetListTransfers mocks base method.
func (m *MockRepository) GetListTransfers(arg0 context.Context, arg1, arg2 int64, arg3, arg4 int) ([]*models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransfers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransfers indicates an expected call of GetListTransfers.
func (mr *MockRepositoryMockRecorder) GetListTransfers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransfers", reflect.TypeOf((*MockRepository)(nil).GetListTransfers), arg0, arg1, arg2, arg3, arg4)
}

// GetListUsers mocks base method.
func (m *MockRepository) GetListUsers(arg0 context.Context, arg1, arg2 int) ([]*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUsers indicates an expected call of GetListUsers.
func (mr *MockRepositoryMockRecorder) GetListUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUsers", reflect.TypeOf((*MockRepository)(nil).GetListUsers), arg0, arg1, arg2)
}

// GetSessionsByID mocks base method.
func (m *MockRepository) GetSessionsByID(arg0 context.Context, arg1 uuid.UUID) (models.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsByID", arg0, arg1)
	ret0, _ := ret[0].(models.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsByID indicates an expected call of GetSessionsByID.
func (mr *MockRepositoryMockRecorder) GetSessionsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsByID", reflect.TypeOf((*MockRepository)(nil).GetSessionsByID), arg0, arg1)
}

// GetTransferByID mocks base method.
func (m *MockRepository) GetTransferByID(arg0 context.Context, arg1 int64) (models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByID", arg0, arg1)
	ret0, _ := ret[0].(models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByID indicates an expected call of GetTransferByID.
func (mr *MockRepositoryMockRecorder) GetTransferByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByID", reflect.TypeOf((*MockRepository)(nil).GetTransferByID), arg0, arg1)
}

// GetUsersByEmail mocks base method.
func (m *MockRepository) GetUsersByEmail(arg0 context.Context, arg1 string) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByEmail", arg0, arg1)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByEmail indicates an expected call of GetUsersByEmail.
func (mr *MockRepositoryMockRecorder) GetUsersByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByEmail", reflect.TypeOf((*MockRepository)(nil).GetUsersByEmail), arg0, arg1)
}

// GetUsersByUsername mocks base method.
func (m *MockRepository) GetUsersByUsername(arg0 context.Context, arg1 string) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByUsername", arg0, arg1)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByUsername indicates an expected call of GetUsersByUsername.
func (mr *MockRepositoryMockRecorder) GetUsersByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByUsername", reflect.TypeOf((*MockRepository)(nil).GetUsersByUsername), arg0, arg1)
}

// GetVerifyEmailByID mocks base method.
func (m *MockRepository) GetVerifyEmailByID(arg0 context.Context, arg1 int64) (models.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyEmailByID", arg0, arg1)
	ret0, _ := ret[0].(models.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyEmailByID indicates an expected call of GetVerifyEmailByID.
func (mr *MockRepositoryMockRecorder) GetVerifyEmailByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyEmailByID", reflect.TypeOf((*MockRepository)(nil).GetVerifyEmailByID), arg0, arg1)
}

// InsertAccount mocks base method.
func (m *MockRepository) InsertAccount(arg0 context.Context, arg1 models.Account) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockRepositoryMockRecorder) InsertAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockRepository)(nil).InsertAccount), arg0, arg1)
}

// InsertEntry mocks base method.
func (m *MockRepository) InsertEntry(arg0 context.Context, arg1 models.Entry) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEntry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEntry indicates an expected call of InsertEntry.
func (mr *MockRepositoryMockRecorder) InsertEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEntry", reflect.TypeOf((*MockRepository)(nil).InsertEntry), arg0, arg1)
}

// InsertSessions mocks base method.
func (m *MockRepository) InsertSessions(arg0 context.Context, arg1 models.Sessions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSessions indicates an expected call of InsertSessions.
func (mr *MockRepositoryMockRecorder) InsertSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSessions", reflect.TypeOf((*MockRepository)(nil).InsertSessions), arg0, arg1)
}

// InsertTransfer mocks base method.
func (m *MockRepository) InsertTransfer(arg0 context.Context, arg1 models.Transfer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransfer", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransfer indicates an expected call of InsertTransfer.
func (mr *MockRepositoryMockRecorder) InsertTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransfer", reflect.TypeOf((*MockRepository)(nil).InsertTransfer), arg0, arg1)
}

// InsertUsers mocks base method.
func (m *MockRepository) InsertUsers(arg0 context.Context, arg1 models.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUsers indicates an expected call of InsertUsers.
func (mr *MockRepositoryMockRecorder) InsertUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsers", reflect.TypeOf((*MockRepository)(nil).InsertUsers), arg0, arg1)
}

// InsertVerifyEmail mocks base method.
func (m *MockRepository) InsertVerifyEmail(arg0 context.Context, arg1 models.VerifyEmail) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVerifyEmail indicates an expected call of InsertVerifyEmail.
func (mr *MockRepositoryMockRecorder) InsertVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVerifyEmail", reflect.TypeOf((*MockRepository)(nil).InsertVerifyEmail), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockRepository) UpdateAccount(arg0 context.Context, arg1 models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockRepositoryMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockRepository)(nil).UpdateAccount), arg0, arg1)
}

// UpdateUsers mocks base method.
func (m *MockRepository) UpdateUsers(arg0 context.Context, arg1 UpdateUserParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockRepositoryMockRecorder) UpdateUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockRepository)(nil).UpdateUsers), arg0, arg1)
}

// UpdateVerifyEmailIsUsed mocks base method.
func (m *MockRepository) UpdateVerifyEmailIsUsed(arg0 context.Context, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmailIsUsed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVerifyEmailIsUsed indicates an expected call of UpdateVerifyEmailIsUsed.
func (mr *MockRepositoryMockRecorder) UpdateVerifyEmailIsUsed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmailIsUsed", reflect.TypeOf((*MockRepository)(nil).UpdateVerifyEmailIsUsed), arg0, arg1, arg2)
}
